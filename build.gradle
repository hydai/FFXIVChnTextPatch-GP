buildscript {
	ext {
		kotlinVersion = '1.3.11'
		springBootVersion = '2.1.0.RELEASE'
	}
	repositories {
		maven { url "https://repo.spring.io/milestone" }
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
		classpath('io.github.fvarrui:javapackager:1.7.2')
	}
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'io.github.fvarrui.javapackager.plugin'

sourceSets {
    main {
		java.srcDir('src/main/java')
		resources.srcDir('src/main/resources')
		java.outputDir = file('build/bin')
		output.resourcesDir = file('build/bin')
    }
}

compileJava {
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
}

repositories {
	maven { url "https://repo.spring.io/milestone" }
	mavenCentral()
}

dependencies {
	testCompile(
        'junit:junit:4.12'
    )
	compile("com.jcraft:jzlib:1.1.3")
	compile("org.nlpcn:nlp-lang:1.7.6")
	compile("com.google.code.gson:gson:2.8.5")
	compile group: 'com.univocity', name: 'univocity-parsers', version: '2.9.1'
}

mainClassName = "name.yumao.ffxiv.chn.FFXIVPatchMain"

jar {
	manifest {
		attributes(
				'Main-Class': 'org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader',
				'Class-Path': './ ' + configurations.compile.collect { it.getName() }.join(' '),
				'Rsrc-Main-Class': mainClassName,
		)
	}
	from {
		// zip compile jar
		configurations.compile.collect { it }
		// zip extra compile jar
//		configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
	}
}

task copyLibs(type: Copy) {
	from configurations.compile
	from 'lib'
	into 'build/lib'
}

task packageMacApp(type: io.github.fvarrui.javapackager.gradle.PackageTask, dependsOn: build) {
	// mandatory
	mainClass = mainClassName
	// optional
	bundleJre = true
	generateInstaller = true
	administratorRequired = false
	platform = "mac"
	additionalResources = [ file('resource'), file('conf') ]
}


tasks.withType(GroovyCompile) {
	groovyOptions.encoding = "MacRoman"
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}
